// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: productService.proto

package services

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProductService service

func NewProductServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProductService service

type ProductService interface {
	//  rpc ProductQuery(ProductRequest) returns(ProductResponse);
	ProductPush(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*ProductResponse, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) ProductPush(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*ProductResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.ProductPush", in)
	out := new(ProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	//  rpc ProductQuery(ProductRequest) returns(ProductResponse);
	ProductPush(context.Context, *ProductRequest, *ProductResponse) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		ProductPush(ctx context.Context, in *ProductRequest, out *ProductResponse) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) ProductPush(ctx context.Context, in *ProductRequest, out *ProductResponse) error {
	return h.ProductServiceHandler.ProductPush(ctx, in, out)
}
